"""
Problem 2 
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

s = 0
n = 2 # for even terms
max_ = 4000000 # value limit for the terms
go = True # driver condition for new terms

# using explicit memoization to make recursion faster ...... without use of lru_cache
# in sequence 1,2,3,5,8,13,21,34 ....  even location 2,5,8...general form 2 +3*n starting from n = 0

#memo
cache = {}

#calculate nth term of the sequence
def fibo(n):
	if n in cache:
		return cache[n]

	if n is 1:
		res = 1
	elif n is 2:
		res = 2
	else:
		res = fibo(n-1) + fibo(n-2)
	cache[n] = res
	if res > max_:
		global go
		go = False
		return 0
	return res

# loop until the term is greater than max_
while go == True: 
	res = fibo(n)
	s+=res
	n+=3

#print sum
print(s)